package com.master.univt.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BOOKSHELF.
*/
public class BookshelfDao extends AbstractDao<Bookshelf, Long> {

    public static final String TABLENAME = "BOOKSHELF";

    /**
     * Properties of entity Bookshelf.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Bookshelf_id = new Property(1, String.class, "bookshelf_id", false, "BOOKSHELF_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Access = new Property(3, String.class, "access", false, "ACCESS");
        public final static Property VolumeCount = new Property(4, int.class, "volumeCount", false, "VOLUME_COUNT");
        public final static Property User_id = new Property(5, long.class, "user_id", false, "USER_ID");
        public final static Property Updated = new Property(6, java.util.Date.class, "updated", false, "UPDATED");
        public final static Property Created = new Property(7, java.util.Date.class, "created", false, "CREATED");
    };

    private DaoSession daoSession;

    private Query<Bookshelf> user_BookshelvesQuery;

    public BookshelfDao(DaoConfig config) {
        super(config);
    }
    
    public BookshelfDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BOOKSHELF' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'BOOKSHELF_ID' TEXT," + // 1: bookshelf_id
                "'TITLE' TEXT," + // 2: title
                "'ACCESS' TEXT," + // 3: access
                "'VOLUME_COUNT' INTEGER NOT NULL ," + // 4: volumeCount
                "'USER_ID' INTEGER NOT NULL ," + // 5: user_id
                "'UPDATED' INTEGER," + // 6: updated
                "'CREATED' INTEGER);"); // 7: created
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOOKSHELF'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Bookshelf entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookshelf_id = entity.getBookshelf_id();
        if (bookshelf_id != null) {
            stmt.bindString(2, bookshelf_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String access = entity.getAccess();
        if (access != null) {
            stmt.bindString(4, access);
        }
        stmt.bindLong(5, entity.getVolumeCount());
        stmt.bindLong(6, entity.getUser_id());
 
        java.util.Date updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(7, updated.getTime());
        }
 
        java.util.Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(8, created.getTime());
        }
    }

    @Override
    protected void attachEntity(Bookshelf entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Bookshelf readEntity(Cursor cursor, int offset) {
        Bookshelf entity = new Bookshelf( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookshelf_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // access
            cursor.getInt(offset + 4), // volumeCount
            cursor.getLong(offset + 5), // user_id
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // updated
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // created
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Bookshelf entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookshelf_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAccess(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVolumeCount(cursor.getInt(offset + 4));
        entity.setUser_id(cursor.getLong(offset + 5));
        entity.setUpdated(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setCreated(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Bookshelf entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Bookshelf entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "bookshelves" to-many relationship of User. */
    public List<Bookshelf> _queryUser_Bookshelves(Long id) {
        synchronized (this) {
            if (user_BookshelvesQuery == null) {
                QueryBuilder<Bookshelf> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                user_BookshelvesQuery = queryBuilder.build();
            }
        }
        Query<Bookshelf> query = user_BookshelvesQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
