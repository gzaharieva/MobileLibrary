package com.master.univt.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ACCESS_INFO.
*/
public class AccessInfoDao extends AbstractDao<AccessInfo, Long> {

    public static final String TABLENAME = "ACCESS_INFO";

    /**
     * Properties of entity AccessInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Country = new Property(1, String.class, "country", false, "COUNTRY");
        public final static Property WebReaderLink = new Property(2, String.class, "webReaderLink", false, "WEB_READER_LINK");
        public final static Property Pdf = new Property(3, boolean.class, "pdf", false, "PDF");
        public final static Property Epub = new Property(4, boolean.class, "epub", false, "EPUB");
        public final static Property AccessViewStatus = new Property(5, int.class, "accessViewStatus", false, "ACCESS_VIEW_STATUS");
    };


    public AccessInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AccessInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ACCESS_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'COUNTRY' TEXT," + // 1: country
                "'WEB_READER_LINK' TEXT," + // 2: webReaderLink
                "'PDF' INTEGER NOT NULL ," + // 3: pdf
                "'EPUB' INTEGER NOT NULL ," + // 4: epub
                "'ACCESS_VIEW_STATUS' INTEGER NOT NULL );"); // 5: accessViewStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ACCESS_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AccessInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(2, country);
        }
 
        String webReaderLink = entity.getWebReaderLink();
        if (webReaderLink != null) {
            stmt.bindString(3, webReaderLink);
        }
        stmt.bindLong(4, entity.getPdf() ? 1l: 0l);
        stmt.bindLong(5, entity.getEpub() ? 1l: 0l);
        stmt.bindLong(6, entity.getAccessViewStatus());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AccessInfo readEntity(Cursor cursor, int offset) {
        AccessInfo entity = new AccessInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // country
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // webReaderLink
            cursor.getShort(offset + 3) != 0, // pdf
            cursor.getShort(offset + 4) != 0, // epub
            cursor.getInt(offset + 5) // accessViewStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AccessInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCountry(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWebReaderLink(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPdf(cursor.getShort(offset + 3) != 0);
        entity.setEpub(cursor.getShort(offset + 4) != 0);
        entity.setAccessViewStatus(cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AccessInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AccessInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
