package com.master.univt.model;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table USER.
 */
public class User {

    private Long id;
    /**
     * Not-null value.
     */
    private String uId;
    private String username;
    private String name;
    private String bookshelvesString;
    private String volumesString;
    private Map<String, String> books;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient UserDao myDao;

    private List<Bookshelf> bookshelves;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, String uId, String username, String bookshelvesString, String books, String name) {
        this.id = id;
        this.uId = uId;
        this.username = username;
        this.bookshelvesString = bookshelvesString;

        this.books = getMap(books);
        this.name = name;
    }

    private Map<String, String> getMap(String books) {
        Map<String, String> myMap = new HashMap<String, String>();
        if (books != null && !books.isEmpty()) {
            String s = books.substring(1, books.length() - 1);
            if (!s.isEmpty()) {
//                Log.d("GABI", s);
                if (s.split("=\\{").length == 2) {
                    String[] onlyOne = s.split("=\\{");
                    myMap.put(onlyOne[0], "{".concat(onlyOne[1]));
                } else {
                    String[] pairs = s.split(",");
                    for (int i = 0; i < pairs.length; i++) {
                        String pair = pairs[i];
//                    Log.d("LOG", "pair:" + pair);
                        String[] keyValue = pair.split("=");
                        if (keyValue.length > 1) {
                            myMap.put(keyValue[0], keyValue[1]);
                        }
                    }

                }
            }
        }
        return myMap;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Not-null value.
     */
    public String getUId() {
        return uId;
    }

    /**
     * Not-null value; ensure this value is available before it is saved to the database.
     */
    public void setUId(String uId) {
        this.uId = uId;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<Bookshelf> getBookshelves() {
        if (bookshelves == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BookshelfDao targetDao = daoSession.getBookshelfDao();
            List<Bookshelf> bookshelvesNew = targetDao._queryUser_Bookshelves(id);
            synchronized (this) {
                if (bookshelves == null) {
                    bookshelves = bookshelvesNew;
                }
            }
        }
        return bookshelves;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetBookshelves() {
        bookshelves = null;
    }

    /**
     * Convenient call for  Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

    public String getBookshelvesString() {
        return bookshelvesString;
    }

    public void setBookshelvesString(String bookshelvesString) {
        this.bookshelvesString = bookshelvesString;
    }

    public String getVolumesString() {
        return volumesString;
    }

    public void setVolumesString(String volumesString) {
        this.volumesString = volumesString;
    }

    public Map<String, String> getBooks() {
        if (books == null) {
            books = new HashMap<>();
        }
        return books;
    }

    public void setBooks(Map<String, String> books) {
        this.books = books;
    }

    public void setBooks(String books) {
        this.books = getMap(books);
    }
}
