package com.master.univt.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.master.univt.model.SaleInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SALE_INFO.
*/
public class SaleInfoDao extends AbstractDao<SaleInfo, Long> {

    public static final String TABLENAME = "SALE_INFO";

    /**
     * Properties of entity SaleInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Country = new Property(1, String.class, "country", false, "COUNTRY");
        public final static Property Saleability = new Property(2, String.class, "saleability", false, "SALEABILITY");
        public final static Property BuyLink = new Property(3, String.class, "buyLink", false, "BUY_LINK");
        public final static Property IsEbook = new Property(4, boolean.class, "isEbook", false, "IS_EBOOK");
    };


    public SaleInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SaleInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SALE_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'COUNTRY' TEXT," + // 1: country
                "'SALEABILITY' TEXT," + // 2: saleability
                "'BUY_LINK' TEXT," + // 3: buyLink
                "'IS_EBOOK' INTEGER NOT NULL );"); // 4: isEbook
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SALE_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SaleInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(2, country);
        }
 
        String saleability = entity.getSaleability();
        if (saleability != null) {
            stmt.bindString(3, saleability);
        }
 
        String buyLink = entity.getBuyLink();
        if (buyLink != null) {
            stmt.bindString(4, buyLink);
        }
        stmt.bindLong(5, entity.getIsEbook() ? 1l: 0l);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SaleInfo readEntity(Cursor cursor, int offset) {
        SaleInfo entity = new SaleInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // country
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // saleability
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // buyLink
            cursor.getShort(offset + 4) != 0 // isEbook
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SaleInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCountry(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSaleability(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBuyLink(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsEbook(cursor.getShort(offset + 4) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SaleInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SaleInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
