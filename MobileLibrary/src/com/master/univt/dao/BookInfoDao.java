package com.master.univt.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.master.univt.model.BookInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BOOK_INFO.
*/
public class BookInfoDao extends AbstractDao<BookInfo, Long> {

    public static final String TABLENAME = "BOOK_INFO";

    /**
     * Properties of entity BookInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Authors = new Property(2, String.class, "authors", false, "AUTHORS");
        public final static Property Subtitle = new Property(3, String.class, "subtitle", false, "SUBTITLE");
        public final static Property PrintType = new Property(4, String.class, "printType", false, "PRINT_TYPE");
        public final static Property Categories = new Property(5, String.class, "categories", false, "CATEGORIES");
        public final static Property ContentVersion = new Property(6, String.class, "contentVersion", false, "CONTENT_VERSION");
        public final static Property ImageLinks = new Property(7, String.class, "imageLinks", false, "IMAGE_LINKS");
        public final static Property PublishedDate = new Property(8, java.util.Date.class, "publishedDate", false, "PUBLISHED_DATE");
        public final static Property PageCount = new Property(9, java.util.Date.class, "pageCount", false, "PAGE_COUNT");
    };


    public BookInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BookInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BOOK_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'AUTHORS' TEXT," + // 2: authors
                "'SUBTITLE' TEXT," + // 3: subtitle
                "'PRINT_TYPE' TEXT," + // 4: printType
                "'CATEGORIES' TEXT," + // 5: categories
                "'CONTENT_VERSION' TEXT," + // 6: contentVersion
                "'IMAGE_LINKS' TEXT," + // 7: imageLinks
                "'PUBLISHED_DATE' INTEGER," + // 8: publishedDate
                "'PAGE_COUNT' INTEGER);"); // 9: pageCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOOK_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BookInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String authors = entity.getAuthors();
        if (authors != null) {
            stmt.bindString(3, authors);
        }
 
        String subtitle = entity.getSubtitle();
        if (subtitle != null) {
            stmt.bindString(4, subtitle);
        }
 
        String printType = entity.getPrintType();
        if (printType != null) {
            stmt.bindString(5, printType);
        }
 
        String categories = entity.getCategories();
        if (categories != null) {
            stmt.bindString(6, categories);
        }
 
        String contentVersion = entity.getContentVersion();
        if (contentVersion != null) {
            stmt.bindString(7, contentVersion);
        }
 
        String imageLinks = entity.getImageLinks();
        if (imageLinks != null) {
            stmt.bindString(8, imageLinks);
        }
 
        java.util.Date publishedDate = entity.getPublishedDate();
        if (publishedDate != null) {
            stmt.bindLong(9, publishedDate.getTime());
        }
 
        java.util.Date pageCount = entity.getPageCount();
        if (pageCount != null) {
            stmt.bindLong(10, pageCount.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BookInfo readEntity(Cursor cursor, int offset) {
        BookInfo entity = new BookInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // authors
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // subtitle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // printType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // categories
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contentVersion
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // imageLinks
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // publishedDate
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)) // pageCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BookInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthors(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSubtitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrintType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCategories(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContentVersion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImageLinks(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPublishedDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setPageCount(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BookInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BookInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
