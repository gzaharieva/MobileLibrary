package com.master.univt.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 1000): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster
{
  public static final int SCHEMA_VERSION = 1034;

  /** Creates underlying database table using DAOs. */
  public static void createAllTables(final SQLiteDatabase db, final boolean ifNotExists)
  {
    UserDao.createTable(db, ifNotExists);
  }

  /** Drops underlying database table using DAOs. */
  public static void dropAllTables(final SQLiteDatabase db, final boolean ifExists)
  {
    UserDao.dropTable(db, ifExists);
  }

  public static abstract class OpenHelper extends SQLiteOpenHelper
  {

    public OpenHelper(final Context context, final String name, final CursorFactory factory)
    {
      super(context, name, factory, SCHEMA_VERSION);
    }

    @Override
    public void onCreate(final SQLiteDatabase db)
    {
      Log.i("ggreenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
      createAllTables(db, false);
    }
  }

  /** WARNING: Drops all table on Upgrade! Use only during development. */
  public static class DevOpenHelper extends OpenHelper
  {
    public DevOpenHelper(final Context context, final String name, final CursorFactory factory)
    {
      super(context, name, factory);
    }

    @Override
    public void onUpgrade(final SQLiteDatabase db, final int oldVersion, final int newVersion)
    {
      Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
      // dropAllTables(db, true);

      createAllTables(db, true);


      // onCreate(db);
    }
  }

  public DaoMaster(final SQLiteDatabase db)
  {
    super(db, SCHEMA_VERSION);
    registerDaoClass(UserDao.class);
  }

  @Override
  public DaoSession newSession()
  {
    return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
  }

  @Override
  public DaoSession newSession(final IdentityScopeType type)
  {
    return new DaoSession(db, type, daoConfigMap);
  }

}
